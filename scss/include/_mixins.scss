// Mixins para media queries
// El parámetro es el nombre del breakpoint

@mixin hasta($size){
  @if map-has-key($breakpoints,$size){
  // Si el parámetro es el nombre de un tamaño, se extrae desde el map
    @media screen and (max-width: map-get($breakpoints,$size) - 1){
      @content;
    }
  } @else {
  // Si el parámetro no existe en el map, se toma su valor para construir la media query
    @media screen and (max-width: $size){
      @content;
    }
  }
}

@mixin desde($size){
  @if map-has-key($breakpoints,$size){
  // Si el parámetro es el nombre de un tamaño, se extrae desde el map
    @media screen and (min-width: map-get($breakpoints,$size)){
      @content;
    }
  } @else {
  // Si el parámetro no existe en el map, se toma su valor para construir la media query
    @media screen and (min-width: $size){
      @content;
    }
  }
}

@mixin desde-hasta($desde,$hasta){
  @if map-has-key($breakpoints,$desde) and map-has-key($breakpoints,$hasta){
    @media screen and (min-width: map-get($breakpoints,$desde)) and (max-width: map-get($breakpoints,$hasta) - 1){
      @content;
    }
  } @else if map-has-key($breakpoints,$desde) and not map-has-key($breakpoints,$hasta){
    @media screen and (min-width: map-get($breakpoints,$desde)) and (max-width: $hasta) {
      @content;
    }
  } @else if not map-has-key($breakpoints,$desde) and map-has-key($breakpoints,$hasta) {
    @media screen and (min-width: $desde) and (max-width: map-get($breakpoints,$hasta) - 1){
      @content;
    }
  } @else {
    @media screen and (min-width: $desde) and (max-width: $hasta){
      @content;
    }
  }
}


// Mixin para proporcion de aspecto, se le pasan tres parámetros
// Horizontal, Vertical y Ancho. Este ultimo es opcional, si no 
// se pasa, se tomará el 100% de ancho por defecto.
@mixin proporcion($h,$v,$width:100%){
  width          : $width;
  height         : 0;
  overflow       : hidden;
  padding-bottom : $width * ($v/$h);
}


@mixin centro($width:auto){
  display: table;
  width: $width;
  margin-left: auto;
  margin-right: auto;
}

@mixin box-shadow($top, $left, $blur, $color, $inset:"") {
  -webkit-box-shadow:$top $left $blur $color #{$inset};
  -moz-box-shadow:$top $left $blur $color #{$inset};
  box-shadow:$top $left $blur $color #{$inset};
}



// Importando compenentes del Mixins
@import "mixins/border_radius";
@import "mixins/opacity";
@import "mixins/menu";
@import "mixins/transition";